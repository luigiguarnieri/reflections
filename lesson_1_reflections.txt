How did viewing a diff between two versions of a file help you see the bug that was introduced?
	It was very easy to see only the different lines between those two files. In this way, I have focused my attention to find the typo, instead of reading, line by line, all the code of those files, looking for a typo. I used the diff  -u command in the terminal on a Mac platform.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
	Having access to the entire history of a file, it's very simple to see how it has changed and comparing differences between two different versions of the same file.
	As a programmer, this feature can give me the chance to take under control my work and see, easily, what changes I've made to my files and finding out typos or errors during the app development.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
	The pros in the manually choosing when to create a commit is that you can divide easily logical changes in more commits, giving others the opportunity to understand what it's changed in a better way.
	The cons is that it's up to you finding the best moment to create a new commit and, above all, remembering to do this operation during the development of your code.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
	Saving multiple files in one commit gives the user the chance to look in a better way all the changes made during devolping the code. Infact, it can be possible that a change in the code involves more than one file.

How can you use the commands git log and git diff to view the history of files?
	Using "git log" it's possible to read all the commits inside a repository. More efficiently with the command "git log --stat" it's possible to read all the commits and, for every of them, reading the number of changed lines (added and deleted) and all the files involved in the commit's change.
	Using "git diff -u", besides, user can read the lines changed between two commits, seeing specifically the code that has been added or deleted.

How might using version control make you more confident to make changes that could break something?
	Using version control I could be more confident doing changes to the code with the chance to come back to a previous functioning version in every moment.

Now that you have your workspace set up, what do you want to try using Git for?
	I'd want to try to use Git for my apps development in combination with Android Studio. I can see the time to go on with my Android Developer Nanodegree, having reached more confidence with Git and its use.
	


